#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class SleepMethod:
  NANOSLEEP = 0
  PAUSE = 1

  _VALUES_TO_NAMES = {
    0: "NANOSLEEP",
    1: "PAUSE",
  }

  _NAMES_TO_VALUES = {
    "NANOSLEEP": 0,
    "PAUSE": 1,
  }


class CounterSubscribeRequest:
  """
  Attributes:
   - counters
   - maxTime
   - maxCount
   - intervalInNs
   - batchSize
   - sleepMethod
   - veryNice
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'counters', (TType.STRING,None), None, ), # 1
    (2, TType.I64, 'maxTime', None, None, ), # 2
    (3, TType.I64, 'maxCount', None, None, ), # 3
    (4, TType.I64, 'intervalInNs', None, None, ), # 4
    (5, TType.I32, 'batchSize', None, None, ), # 5
    (6, TType.I32, 'sleepMethod', None, None, ), # 6
    (7, TType.BOOL, 'veryNice', None, None, ), # 7
  )

  def __init__(self, counters=None, maxTime=None, maxCount=None, intervalInNs=None, batchSize=None, sleepMethod=None, veryNice=None,):
    self.counters = counters
    self.maxTime = maxTime
    self.maxCount = maxCount
    self.intervalInNs = intervalInNs
    self.batchSize = batchSize
    self.sleepMethod = sleepMethod
    self.veryNice = veryNice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.counters = set()
          (_etype3, _size0) = iprot.readSetBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString()
            self.counters.add(_elem5)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.maxTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.maxCount = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.intervalInNs = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.batchSize = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.sleepMethod = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.veryNice = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CounterSubscribeRequest')
    if self.counters is not None:
      oprot.writeFieldBegin('counters', TType.SET, 1)
      oprot.writeSetBegin(TType.STRING, len(self.counters))
      for iter6 in self.counters:
        oprot.writeString(iter6)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.maxTime is not None:
      oprot.writeFieldBegin('maxTime', TType.I64, 2)
      oprot.writeI64(self.maxTime)
      oprot.writeFieldEnd()
    if self.maxCount is not None:
      oprot.writeFieldBegin('maxCount', TType.I64, 3)
      oprot.writeI64(self.maxCount)
      oprot.writeFieldEnd()
    if self.intervalInNs is not None:
      oprot.writeFieldBegin('intervalInNs', TType.I64, 4)
      oprot.writeI64(self.intervalInNs)
      oprot.writeFieldEnd()
    if self.batchSize is not None:
      oprot.writeFieldBegin('batchSize', TType.I32, 5)
      oprot.writeI32(self.batchSize)
      oprot.writeFieldEnd()
    if self.sleepMethod is not None:
      oprot.writeFieldBegin('sleepMethod', TType.I32, 6)
      oprot.writeI32(self.sleepMethod)
      oprot.writeFieldEnd()
    if self.veryNice is not None:
      oprot.writeFieldBegin('veryNice', TType.BOOL, 7)
      oprot.writeBool(self.veryNice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.counters)
    value = (value * 31) ^ hash(self.maxTime)
    value = (value * 31) ^ hash(self.maxCount)
    value = (value * 31) ^ hash(self.intervalInNs)
    value = (value * 31) ^ hash(self.batchSize)
    value = (value * 31) ^ hash(self.sleepMethod)
    value = (value * 31) ^ hash(self.veryNice)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HighresTime:
  """
  Attributes:
   - seconds
   - nanoseconds
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'seconds', None, None, ), # 1
    (2, TType.I64, 'nanoseconds', None, None, ), # 2
  )

  def __init__(self, seconds=None, nanoseconds=None,):
    self.seconds = seconds
    self.nanoseconds = nanoseconds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.seconds = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.nanoseconds = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HighresTime')
    if self.seconds is not None:
      oprot.writeFieldBegin('seconds', TType.I64, 1)
      oprot.writeI64(self.seconds)
      oprot.writeFieldEnd()
    if self.nanoseconds is not None:
      oprot.writeFieldBegin('nanoseconds', TType.I64, 2)
      oprot.writeI64(self.nanoseconds)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.seconds)
    value = (value * 31) ^ hash(self.nanoseconds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CounterPublication:
  """
  Attributes:
   - hostname
   - times
   - counters
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hostname', None, None, ), # 1
    (2, TType.LIST, 'times', (TType.STRUCT,(HighresTime, HighresTime.thrift_spec)), None, ), # 2
    (3, TType.MAP, 'counters', (TType.STRING,None,TType.LIST,(TType.I64,None)), None, ), # 3
  )

  def __init__(self, hostname=None, times=None, counters=None,):
    self.hostname = hostname
    self.times = times
    self.counters = counters

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.hostname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.times = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = HighresTime()
            _elem12.read(iprot)
            self.times.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.counters = {}
          (_ktype14, _vtype15, _size13 ) = iprot.readMapBegin()
          for _i17 in xrange(_size13):
            _key18 = iprot.readString()
            _val19 = []
            (_etype23, _size20) = iprot.readListBegin()
            for _i24 in xrange(_size20):
              _elem25 = iprot.readI64()
              _val19.append(_elem25)
            iprot.readListEnd()
            self.counters[_key18] = _val19
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CounterPublication')
    if self.hostname is not None:
      oprot.writeFieldBegin('hostname', TType.STRING, 1)
      oprot.writeString(self.hostname)
      oprot.writeFieldEnd()
    if self.times is not None:
      oprot.writeFieldBegin('times', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.times))
      for iter26 in self.times:
        iter26.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.counters is not None:
      oprot.writeFieldBegin('counters', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.counters))
      for kiter27,viter28 in self.counters.items():
        oprot.writeString(kiter27)
        oprot.writeListBegin(TType.I64, len(viter28))
        for iter29 in viter28:
          oprot.writeI64(iter29)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hostname)
    value = (value * 31) ^ hash(self.times)
    value = (value * 31) ^ hash(self.counters)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
