#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from neteng.fboss.ctrl import FbossCtrl
from neteng.fboss.ctrl.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void flushCountersNow()')
  print('  void addUnicastRoute(i16 clientId, UnicastRoute r)')
  print('  void deleteUnicastRoute(i16 clientId, IpPrefix r)')
  print('  void addUnicastRoutes(i16 clientId,  r)')
  print('  void deleteUnicastRoutes(i16 clientId,  r)')
  print('  void syncFib(i16 clientId,  routes)')
  print('  void sendPkt(i32 port, i32 vlan, fbbinary data)')
  print('  void sendPktHex(i32 port, i32 vlan, fbstring hex)')
  print('  i32 flushNeighborEntry(BinaryAddress ip, i32 vlanId)')
  print('   getVlanAddresses(i32 vlanId)')
  print('   getVlanAddressesByName(string vlan)')
  print('   getVlanBinaryAddresses(i32 vlanId)')
  print('   getVlanBinaryAddressesByName(string vlan)')
  print('  UnicastRoute getIpRoute(Address addr, i32 vrfId)')
  print('   getAllInterfaces()')
  print('  void registerForPortStatusChanged()')
  print('   getInterfaceList()')
  print('   getRouteTable()')
  print('   getPortStatus( ports)')
  print('  InterfaceDetail getInterfaceDetail(i32 interfaceId)')
  print('  PortStatThrift getPortStats(i32 portId)')
  print('   getAllPortStats()')
  print('   getArpTable()')
  print('   getNdpTable()')
  print('   getSfpDomInfo( port)')
  print('   getTransceiverInfo( idx)')
  print('  BootType getBootType()')
  print('   getLldpNeighbors()')
  print('  void startPktCapture(CaptureInfo info)')
  print('  void stopPktCapture(string name)')
  print('  void stopAllPktCaptures()')
  print('  bool subscribeToCounters(CounterSubscribeRequest req)')
  print('  void keepalive()')
  print('  i32 getIdleTimeout()')
  print('  ProductInfo getProductInfo()')
  print('  void reloadConfig()')
  print('  fb_status getStatus()')
  print('   getCounters()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = FbossCtrl.Client(protocol)
transport.open()

if cmd == 'flushCountersNow':
  if len(args) != 0:
    print('flushCountersNow requires 0 args')
    sys.exit(1)
  pp.pprint(client.flushCountersNow())

elif cmd == 'addUnicastRoute':
  if len(args) != 2:
    print('addUnicastRoute requires 2 args')
    sys.exit(1)
  pp.pprint(client.addUnicastRoute(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteUnicastRoute':
  if len(args) != 2:
    print('deleteUnicastRoute requires 2 args')
    sys.exit(1)
  pp.pprint(client.deleteUnicastRoute(eval(args[0]),eval(args[1]),))

elif cmd == 'addUnicastRoutes':
  if len(args) != 2:
    print('addUnicastRoutes requires 2 args')
    sys.exit(1)
  pp.pprint(client.addUnicastRoutes(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteUnicastRoutes':
  if len(args) != 2:
    print('deleteUnicastRoutes requires 2 args')
    sys.exit(1)
  pp.pprint(client.deleteUnicastRoutes(eval(args[0]),eval(args[1]),))

elif cmd == 'syncFib':
  if len(args) != 2:
    print('syncFib requires 2 args')
    sys.exit(1)
  pp.pprint(client.syncFib(eval(args[0]),eval(args[1]),))

elif cmd == 'sendPkt':
  if len(args) != 3:
    print('sendPkt requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendPkt(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'sendPktHex':
  if len(args) != 3:
    print('sendPktHex requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendPktHex(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'flushNeighborEntry':
  if len(args) != 2:
    print('flushNeighborEntry requires 2 args')
    sys.exit(1)
  pp.pprint(client.flushNeighborEntry(eval(args[0]),eval(args[1]),))

elif cmd == 'getVlanAddresses':
  if len(args) != 1:
    print('getVlanAddresses requires 1 args')
    sys.exit(1)
  pp.pprint(client.getVlanAddresses(eval(args[0]),))

elif cmd == 'getVlanAddressesByName':
  if len(args) != 1:
    print('getVlanAddressesByName requires 1 args')
    sys.exit(1)
  pp.pprint(client.getVlanAddressesByName(args[0],))

elif cmd == 'getVlanBinaryAddresses':
  if len(args) != 1:
    print('getVlanBinaryAddresses requires 1 args')
    sys.exit(1)
  pp.pprint(client.getVlanBinaryAddresses(eval(args[0]),))

elif cmd == 'getVlanBinaryAddressesByName':
  if len(args) != 1:
    print('getVlanBinaryAddressesByName requires 1 args')
    sys.exit(1)
  pp.pprint(client.getVlanBinaryAddressesByName(args[0],))

elif cmd == 'getIpRoute':
  if len(args) != 2:
    print('getIpRoute requires 2 args')
    sys.exit(1)
  pp.pprint(client.getIpRoute(eval(args[0]),eval(args[1]),))

elif cmd == 'getAllInterfaces':
  if len(args) != 0:
    print('getAllInterfaces requires 0 args')
    sys.exit(1)
  pp.pprint(client.getAllInterfaces())

elif cmd == 'registerForPortStatusChanged':
  if len(args) != 0:
    print('registerForPortStatusChanged requires 0 args')
    sys.exit(1)
  pp.pprint(client.registerForPortStatusChanged())

elif cmd == 'getInterfaceList':
  if len(args) != 0:
    print('getInterfaceList requires 0 args')
    sys.exit(1)
  pp.pprint(client.getInterfaceList())

elif cmd == 'getRouteTable':
  if len(args) != 0:
    print('getRouteTable requires 0 args')
    sys.exit(1)
  pp.pprint(client.getRouteTable())

elif cmd == 'getPortStatus':
  if len(args) != 1:
    print('getPortStatus requires 1 args')
    sys.exit(1)
  pp.pprint(client.getPortStatus(eval(args[0]),))

elif cmd == 'getInterfaceDetail':
  if len(args) != 1:
    print('getInterfaceDetail requires 1 args')
    sys.exit(1)
  pp.pprint(client.getInterfaceDetail(eval(args[0]),))

elif cmd == 'getPortStats':
  if len(args) != 1:
    print('getPortStats requires 1 args')
    sys.exit(1)
  pp.pprint(client.getPortStats(eval(args[0]),))

elif cmd == 'getAllPortStats':
  if len(args) != 0:
    print('getAllPortStats requires 0 args')
    sys.exit(1)
  pp.pprint(client.getAllPortStats())

elif cmd == 'getArpTable':
  if len(args) != 0:
    print('getArpTable requires 0 args')
    sys.exit(1)
  pp.pprint(client.getArpTable())

elif cmd == 'getNdpTable':
  if len(args) != 0:
    print('getNdpTable requires 0 args')
    sys.exit(1)
  pp.pprint(client.getNdpTable())

elif cmd == 'getSfpDomInfo':
  if len(args) != 1:
    print('getSfpDomInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.getSfpDomInfo(eval(args[0]),))

elif cmd == 'getTransceiverInfo':
  if len(args) != 1:
    print('getTransceiverInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.getTransceiverInfo(eval(args[0]),))

elif cmd == 'getBootType':
  if len(args) != 0:
    print('getBootType requires 0 args')
    sys.exit(1)
  pp.pprint(client.getBootType())

elif cmd == 'getLldpNeighbors':
  if len(args) != 0:
    print('getLldpNeighbors requires 0 args')
    sys.exit(1)
  pp.pprint(client.getLldpNeighbors())

elif cmd == 'startPktCapture':
  if len(args) != 1:
    print('startPktCapture requires 1 args')
    sys.exit(1)
  pp.pprint(client.startPktCapture(eval(args[0]),))

elif cmd == 'stopPktCapture':
  if len(args) != 1:
    print('stopPktCapture requires 1 args')
    sys.exit(1)
  pp.pprint(client.stopPktCapture(args[0],))

elif cmd == 'stopAllPktCaptures':
  if len(args) != 0:
    print('stopAllPktCaptures requires 0 args')
    sys.exit(1)
  pp.pprint(client.stopAllPktCaptures())

elif cmd == 'subscribeToCounters':
  if len(args) != 1:
    print('subscribeToCounters requires 1 args')
    sys.exit(1)
  pp.pprint(client.subscribeToCounters(eval(args[0]),))

elif cmd == 'keepalive':
  if len(args) != 0:
    print('keepalive requires 0 args')
    sys.exit(1)
  pp.pprint(client.keepalive())

elif cmd == 'getIdleTimeout':
  if len(args) != 0:
    print('getIdleTimeout requires 0 args')
    sys.exit(1)
  pp.pprint(client.getIdleTimeout())

elif cmd == 'getProductInfo':
  if len(args) != 0:
    print('getProductInfo requires 0 args')
    sys.exit(1)
  pp.pprint(client.getProductInfo())

elif cmd == 'reloadConfig':
  if len(args) != 0:
    print('reloadConfig requires 0 args')
    sys.exit(1)
  pp.pprint(client.reloadConfig())

elif cmd == 'getStatus':
  if len(args) != 0:
    print('getStatus requires 0 args')
    sys.exit(1)
  pp.pprint(client.getStatus())

elif cmd == 'getCounters':
  if len(args) != 0:
    print('getCounters requires 0 args')
    sys.exit(1)
  pp.pprint(client.getCounters())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
