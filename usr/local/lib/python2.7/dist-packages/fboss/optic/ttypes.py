#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TransceiverType:
  SFP = 0
  QSFP = 1

  _VALUES_TO_NAMES = {
    0: "SFP",
    1: "QSFP",
  }

  _NAMES_TO_VALUES = {
    "SFP": 0,
    "QSFP": 1,
  }


class SfpDomThreshFlags:
  """
  Attributes:
   - tempAlarmHigh
   - tempAlarmLow
   - tempWarnHigh
   - tempWarnLow
   - vccAlarmHigh
   - vccAlarmLow
   - vccWarnHigh
   - vccWarnLow
   - txPwrAlarmHigh
   - txPwrAlarmLow
   - txPwrWarnHigh
   - txPwrWarnLow
   - rxPwrAlarmHigh
   - rxPwrAlarmLow
   - rxPwrWarnHigh
   - rxPwrWarnLow
   - txBiasAlarmHigh
   - txBiasAlarmLow
   - txBiasWarnHigh
   - txBiasWarnLow
   - deleteMe
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'tempAlarmHigh', None, None, ), # 1
    (2, TType.BOOL, 'tempAlarmLow', None, None, ), # 2
    (3, TType.BOOL, 'tempWarnHigh', None, None, ), # 3
    (4, TType.BOOL, 'tempWarnLow', None, None, ), # 4
    (5, TType.BOOL, 'vccAlarmHigh', None, None, ), # 5
    (6, TType.BOOL, 'vccAlarmLow', None, None, ), # 6
    (7, TType.BOOL, 'vccWarnHigh', None, None, ), # 7
    (8, TType.BOOL, 'vccWarnLow', None, None, ), # 8
    (9, TType.BOOL, 'txPwrAlarmHigh', None, None, ), # 9
    (10, TType.BOOL, 'txPwrAlarmLow', None, None, ), # 10
    (11, TType.BOOL, 'txPwrWarnHigh', None, None, ), # 11
    (12, TType.BOOL, 'txPwrWarnLow', None, None, ), # 12
    (13, TType.BOOL, 'rxPwrAlarmHigh', None, None, ), # 13
    (14, TType.BOOL, 'rxPwrAlarmLow', None, None, ), # 14
    (15, TType.BOOL, 'rxPwrWarnHigh', None, None, ), # 15
    (16, TType.BOOL, 'rxPwrWarnLow', None, None, ), # 16
    (17, TType.BOOL, 'txBiasAlarmHigh', None, None, ), # 17
    (18, TType.BOOL, 'txBiasAlarmLow', None, None, ), # 18
    (19, TType.BOOL, 'txBiasWarnHigh', None, None, ), # 19
    (20, TType.BOOL, 'txBiasWarnLow', None, None, ), # 20
    (21, TType.BOOL, 'deleteMe', None, None, ), # 21
  )

  def __init__(self, tempAlarmHigh=None, tempAlarmLow=None, tempWarnHigh=None, tempWarnLow=None, vccAlarmHigh=None, vccAlarmLow=None, vccWarnHigh=None, vccWarnLow=None, txPwrAlarmHigh=None, txPwrAlarmLow=None, txPwrWarnHigh=None, txPwrWarnLow=None, rxPwrAlarmHigh=None, rxPwrAlarmLow=None, rxPwrWarnHigh=None, rxPwrWarnLow=None, txBiasAlarmHigh=None, txBiasAlarmLow=None, txBiasWarnHigh=None, txBiasWarnLow=None, deleteMe=None,):
    self.tempAlarmHigh = tempAlarmHigh
    self.tempAlarmLow = tempAlarmLow
    self.tempWarnHigh = tempWarnHigh
    self.tempWarnLow = tempWarnLow
    self.vccAlarmHigh = vccAlarmHigh
    self.vccAlarmLow = vccAlarmLow
    self.vccWarnHigh = vccWarnHigh
    self.vccWarnLow = vccWarnLow
    self.txPwrAlarmHigh = txPwrAlarmHigh
    self.txPwrAlarmLow = txPwrAlarmLow
    self.txPwrWarnHigh = txPwrWarnHigh
    self.txPwrWarnLow = txPwrWarnLow
    self.rxPwrAlarmHigh = rxPwrAlarmHigh
    self.rxPwrAlarmLow = rxPwrAlarmLow
    self.rxPwrWarnHigh = rxPwrWarnHigh
    self.rxPwrWarnLow = rxPwrWarnLow
    self.txBiasAlarmHigh = txBiasAlarmHigh
    self.txBiasAlarmLow = txBiasAlarmLow
    self.txBiasWarnHigh = txBiasWarnHigh
    self.txBiasWarnLow = txBiasWarnLow
    self.deleteMe = deleteMe

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.tempAlarmHigh = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.tempAlarmLow = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.tempWarnHigh = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.tempWarnLow = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.vccAlarmHigh = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.vccAlarmLow = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.vccWarnHigh = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.vccWarnLow = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.txPwrAlarmHigh = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.txPwrAlarmLow = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.txPwrWarnHigh = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.txPwrWarnLow = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.rxPwrAlarmHigh = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BOOL:
          self.rxPwrAlarmLow = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.BOOL:
          self.rxPwrWarnHigh = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.BOOL:
          self.rxPwrWarnLow = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.BOOL:
          self.txBiasAlarmHigh = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.BOOL:
          self.txBiasAlarmLow = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.BOOL:
          self.txBiasWarnHigh = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.BOOL:
          self.txBiasWarnLow = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.BOOL:
          self.deleteMe = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SfpDomThreshFlags')
    if self.tempAlarmHigh is not None:
      oprot.writeFieldBegin('tempAlarmHigh', TType.BOOL, 1)
      oprot.writeBool(self.tempAlarmHigh)
      oprot.writeFieldEnd()
    if self.tempAlarmLow is not None:
      oprot.writeFieldBegin('tempAlarmLow', TType.BOOL, 2)
      oprot.writeBool(self.tempAlarmLow)
      oprot.writeFieldEnd()
    if self.tempWarnHigh is not None:
      oprot.writeFieldBegin('tempWarnHigh', TType.BOOL, 3)
      oprot.writeBool(self.tempWarnHigh)
      oprot.writeFieldEnd()
    if self.tempWarnLow is not None:
      oprot.writeFieldBegin('tempWarnLow', TType.BOOL, 4)
      oprot.writeBool(self.tempWarnLow)
      oprot.writeFieldEnd()
    if self.vccAlarmHigh is not None:
      oprot.writeFieldBegin('vccAlarmHigh', TType.BOOL, 5)
      oprot.writeBool(self.vccAlarmHigh)
      oprot.writeFieldEnd()
    if self.vccAlarmLow is not None:
      oprot.writeFieldBegin('vccAlarmLow', TType.BOOL, 6)
      oprot.writeBool(self.vccAlarmLow)
      oprot.writeFieldEnd()
    if self.vccWarnHigh is not None:
      oprot.writeFieldBegin('vccWarnHigh', TType.BOOL, 7)
      oprot.writeBool(self.vccWarnHigh)
      oprot.writeFieldEnd()
    if self.vccWarnLow is not None:
      oprot.writeFieldBegin('vccWarnLow', TType.BOOL, 8)
      oprot.writeBool(self.vccWarnLow)
      oprot.writeFieldEnd()
    if self.txPwrAlarmHigh is not None:
      oprot.writeFieldBegin('txPwrAlarmHigh', TType.BOOL, 9)
      oprot.writeBool(self.txPwrAlarmHigh)
      oprot.writeFieldEnd()
    if self.txPwrAlarmLow is not None:
      oprot.writeFieldBegin('txPwrAlarmLow', TType.BOOL, 10)
      oprot.writeBool(self.txPwrAlarmLow)
      oprot.writeFieldEnd()
    if self.txPwrWarnHigh is not None:
      oprot.writeFieldBegin('txPwrWarnHigh', TType.BOOL, 11)
      oprot.writeBool(self.txPwrWarnHigh)
      oprot.writeFieldEnd()
    if self.txPwrWarnLow is not None:
      oprot.writeFieldBegin('txPwrWarnLow', TType.BOOL, 12)
      oprot.writeBool(self.txPwrWarnLow)
      oprot.writeFieldEnd()
    if self.rxPwrAlarmHigh is not None:
      oprot.writeFieldBegin('rxPwrAlarmHigh', TType.BOOL, 13)
      oprot.writeBool(self.rxPwrAlarmHigh)
      oprot.writeFieldEnd()
    if self.rxPwrAlarmLow is not None:
      oprot.writeFieldBegin('rxPwrAlarmLow', TType.BOOL, 14)
      oprot.writeBool(self.rxPwrAlarmLow)
      oprot.writeFieldEnd()
    if self.rxPwrWarnHigh is not None:
      oprot.writeFieldBegin('rxPwrWarnHigh', TType.BOOL, 15)
      oprot.writeBool(self.rxPwrWarnHigh)
      oprot.writeFieldEnd()
    if self.rxPwrWarnLow is not None:
      oprot.writeFieldBegin('rxPwrWarnLow', TType.BOOL, 16)
      oprot.writeBool(self.rxPwrWarnLow)
      oprot.writeFieldEnd()
    if self.txBiasAlarmHigh is not None:
      oprot.writeFieldBegin('txBiasAlarmHigh', TType.BOOL, 17)
      oprot.writeBool(self.txBiasAlarmHigh)
      oprot.writeFieldEnd()
    if self.txBiasAlarmLow is not None:
      oprot.writeFieldBegin('txBiasAlarmLow', TType.BOOL, 18)
      oprot.writeBool(self.txBiasAlarmLow)
      oprot.writeFieldEnd()
    if self.txBiasWarnHigh is not None:
      oprot.writeFieldBegin('txBiasWarnHigh', TType.BOOL, 19)
      oprot.writeBool(self.txBiasWarnHigh)
      oprot.writeFieldEnd()
    if self.txBiasWarnLow is not None:
      oprot.writeFieldBegin('txBiasWarnLow', TType.BOOL, 20)
      oprot.writeBool(self.txBiasWarnLow)
      oprot.writeFieldEnd()
    if self.deleteMe is not None:
      oprot.writeFieldBegin('deleteMe', TType.BOOL, 21)
      oprot.writeBool(self.deleteMe)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tempAlarmHigh)
    value = (value * 31) ^ hash(self.tempAlarmLow)
    value = (value * 31) ^ hash(self.tempWarnHigh)
    value = (value * 31) ^ hash(self.tempWarnLow)
    value = (value * 31) ^ hash(self.vccAlarmHigh)
    value = (value * 31) ^ hash(self.vccAlarmLow)
    value = (value * 31) ^ hash(self.vccWarnHigh)
    value = (value * 31) ^ hash(self.vccWarnLow)
    value = (value * 31) ^ hash(self.txPwrAlarmHigh)
    value = (value * 31) ^ hash(self.txPwrAlarmLow)
    value = (value * 31) ^ hash(self.txPwrWarnHigh)
    value = (value * 31) ^ hash(self.txPwrWarnLow)
    value = (value * 31) ^ hash(self.rxPwrAlarmHigh)
    value = (value * 31) ^ hash(self.rxPwrAlarmLow)
    value = (value * 31) ^ hash(self.rxPwrWarnHigh)
    value = (value * 31) ^ hash(self.rxPwrWarnLow)
    value = (value * 31) ^ hash(self.txBiasAlarmHigh)
    value = (value * 31) ^ hash(self.txBiasAlarmLow)
    value = (value * 31) ^ hash(self.txBiasWarnHigh)
    value = (value * 31) ^ hash(self.txBiasWarnLow)
    value = (value * 31) ^ hash(self.deleteMe)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SfpDomThreshValue:
  """
  Attributes:
   - tempAlarmHigh
   - tempAlarmLow
   - tempWarnHigh
   - tempWarnLow
   - vccAlarmHigh
   - vccAlarmLow
   - vccWarnHigh
   - vccWarnLow
   - txPwrAlarmHigh
   - txPwrAlarmLow
   - txPwrWarnHigh
   - txPwrWarnLow
   - rxPwrAlarmHigh
   - rxPwrAlarmLow
   - rxPwrWarnHigh
   - rxPwrWarnLow
   - txBiasAlarmHigh
   - txBiasAlarmLow
   - txBiasWarnHigh
   - txBiasWarnLow
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'tempAlarmHigh', None, None, ), # 1
    (2, TType.DOUBLE, 'tempAlarmLow', None, None, ), # 2
    (3, TType.DOUBLE, 'tempWarnHigh', None, None, ), # 3
    (4, TType.DOUBLE, 'tempWarnLow', None, None, ), # 4
    (5, TType.DOUBLE, 'vccAlarmHigh', None, None, ), # 5
    (6, TType.DOUBLE, 'vccAlarmLow', None, None, ), # 6
    (7, TType.DOUBLE, 'vccWarnHigh', None, None, ), # 7
    (8, TType.DOUBLE, 'vccWarnLow', None, None, ), # 8
    (9, TType.DOUBLE, 'txPwrAlarmHigh', None, None, ), # 9
    (10, TType.DOUBLE, 'txPwrAlarmLow', None, None, ), # 10
    (11, TType.DOUBLE, 'txPwrWarnHigh', None, None, ), # 11
    (12, TType.DOUBLE, 'txPwrWarnLow', None, None, ), # 12
    (13, TType.DOUBLE, 'rxPwrAlarmHigh', None, None, ), # 13
    (14, TType.DOUBLE, 'rxPwrAlarmLow', None, None, ), # 14
    (15, TType.DOUBLE, 'rxPwrWarnHigh', None, None, ), # 15
    (16, TType.DOUBLE, 'rxPwrWarnLow', None, None, ), # 16
    (17, TType.DOUBLE, 'txBiasAlarmHigh', None, None, ), # 17
    (18, TType.DOUBLE, 'txBiasAlarmLow', None, None, ), # 18
    (19, TType.DOUBLE, 'txBiasWarnHigh', None, None, ), # 19
    (20, TType.DOUBLE, 'txBiasWarnLow', None, None, ), # 20
  )

  def __init__(self, tempAlarmHigh=None, tempAlarmLow=None, tempWarnHigh=None, tempWarnLow=None, vccAlarmHigh=None, vccAlarmLow=None, vccWarnHigh=None, vccWarnLow=None, txPwrAlarmHigh=None, txPwrAlarmLow=None, txPwrWarnHigh=None, txPwrWarnLow=None, rxPwrAlarmHigh=None, rxPwrAlarmLow=None, rxPwrWarnHigh=None, rxPwrWarnLow=None, txBiasAlarmHigh=None, txBiasAlarmLow=None, txBiasWarnHigh=None, txBiasWarnLow=None,):
    self.tempAlarmHigh = tempAlarmHigh
    self.tempAlarmLow = tempAlarmLow
    self.tempWarnHigh = tempWarnHigh
    self.tempWarnLow = tempWarnLow
    self.vccAlarmHigh = vccAlarmHigh
    self.vccAlarmLow = vccAlarmLow
    self.vccWarnHigh = vccWarnHigh
    self.vccWarnLow = vccWarnLow
    self.txPwrAlarmHigh = txPwrAlarmHigh
    self.txPwrAlarmLow = txPwrAlarmLow
    self.txPwrWarnHigh = txPwrWarnHigh
    self.txPwrWarnLow = txPwrWarnLow
    self.rxPwrAlarmHigh = rxPwrAlarmHigh
    self.rxPwrAlarmLow = rxPwrAlarmLow
    self.rxPwrWarnHigh = rxPwrWarnHigh
    self.rxPwrWarnLow = rxPwrWarnLow
    self.txBiasAlarmHigh = txBiasAlarmHigh
    self.txBiasAlarmLow = txBiasAlarmLow
    self.txBiasWarnHigh = txBiasWarnHigh
    self.txBiasWarnLow = txBiasWarnLow

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.tempAlarmHigh = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.tempAlarmLow = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.tempWarnHigh = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.tempWarnLow = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.vccAlarmHigh = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.vccAlarmLow = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.vccWarnHigh = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.vccWarnLow = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.txPwrAlarmHigh = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.txPwrAlarmLow = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.txPwrWarnHigh = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.txPwrWarnLow = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.rxPwrAlarmHigh = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.rxPwrAlarmLow = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.rxPwrWarnHigh = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.rxPwrWarnLow = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.txBiasAlarmHigh = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.txBiasAlarmLow = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.txBiasWarnHigh = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.DOUBLE:
          self.txBiasWarnLow = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SfpDomThreshValue')
    if self.tempAlarmHigh is not None:
      oprot.writeFieldBegin('tempAlarmHigh', TType.DOUBLE, 1)
      oprot.writeDouble(self.tempAlarmHigh)
      oprot.writeFieldEnd()
    if self.tempAlarmLow is not None:
      oprot.writeFieldBegin('tempAlarmLow', TType.DOUBLE, 2)
      oprot.writeDouble(self.tempAlarmLow)
      oprot.writeFieldEnd()
    if self.tempWarnHigh is not None:
      oprot.writeFieldBegin('tempWarnHigh', TType.DOUBLE, 3)
      oprot.writeDouble(self.tempWarnHigh)
      oprot.writeFieldEnd()
    if self.tempWarnLow is not None:
      oprot.writeFieldBegin('tempWarnLow', TType.DOUBLE, 4)
      oprot.writeDouble(self.tempWarnLow)
      oprot.writeFieldEnd()
    if self.vccAlarmHigh is not None:
      oprot.writeFieldBegin('vccAlarmHigh', TType.DOUBLE, 5)
      oprot.writeDouble(self.vccAlarmHigh)
      oprot.writeFieldEnd()
    if self.vccAlarmLow is not None:
      oprot.writeFieldBegin('vccAlarmLow', TType.DOUBLE, 6)
      oprot.writeDouble(self.vccAlarmLow)
      oprot.writeFieldEnd()
    if self.vccWarnHigh is not None:
      oprot.writeFieldBegin('vccWarnHigh', TType.DOUBLE, 7)
      oprot.writeDouble(self.vccWarnHigh)
      oprot.writeFieldEnd()
    if self.vccWarnLow is not None:
      oprot.writeFieldBegin('vccWarnLow', TType.DOUBLE, 8)
      oprot.writeDouble(self.vccWarnLow)
      oprot.writeFieldEnd()
    if self.txPwrAlarmHigh is not None:
      oprot.writeFieldBegin('txPwrAlarmHigh', TType.DOUBLE, 9)
      oprot.writeDouble(self.txPwrAlarmHigh)
      oprot.writeFieldEnd()
    if self.txPwrAlarmLow is not None:
      oprot.writeFieldBegin('txPwrAlarmLow', TType.DOUBLE, 10)
      oprot.writeDouble(self.txPwrAlarmLow)
      oprot.writeFieldEnd()
    if self.txPwrWarnHigh is not None:
      oprot.writeFieldBegin('txPwrWarnHigh', TType.DOUBLE, 11)
      oprot.writeDouble(self.txPwrWarnHigh)
      oprot.writeFieldEnd()
    if self.txPwrWarnLow is not None:
      oprot.writeFieldBegin('txPwrWarnLow', TType.DOUBLE, 12)
      oprot.writeDouble(self.txPwrWarnLow)
      oprot.writeFieldEnd()
    if self.rxPwrAlarmHigh is not None:
      oprot.writeFieldBegin('rxPwrAlarmHigh', TType.DOUBLE, 13)
      oprot.writeDouble(self.rxPwrAlarmHigh)
      oprot.writeFieldEnd()
    if self.rxPwrAlarmLow is not None:
      oprot.writeFieldBegin('rxPwrAlarmLow', TType.DOUBLE, 14)
      oprot.writeDouble(self.rxPwrAlarmLow)
      oprot.writeFieldEnd()
    if self.rxPwrWarnHigh is not None:
      oprot.writeFieldBegin('rxPwrWarnHigh', TType.DOUBLE, 15)
      oprot.writeDouble(self.rxPwrWarnHigh)
      oprot.writeFieldEnd()
    if self.rxPwrWarnLow is not None:
      oprot.writeFieldBegin('rxPwrWarnLow', TType.DOUBLE, 16)
      oprot.writeDouble(self.rxPwrWarnLow)
      oprot.writeFieldEnd()
    if self.txBiasAlarmHigh is not None:
      oprot.writeFieldBegin('txBiasAlarmHigh', TType.DOUBLE, 17)
      oprot.writeDouble(self.txBiasAlarmHigh)
      oprot.writeFieldEnd()
    if self.txBiasAlarmLow is not None:
      oprot.writeFieldBegin('txBiasAlarmLow', TType.DOUBLE, 18)
      oprot.writeDouble(self.txBiasAlarmLow)
      oprot.writeFieldEnd()
    if self.txBiasWarnHigh is not None:
      oprot.writeFieldBegin('txBiasWarnHigh', TType.DOUBLE, 19)
      oprot.writeDouble(self.txBiasWarnHigh)
      oprot.writeFieldEnd()
    if self.txBiasWarnLow is not None:
      oprot.writeFieldBegin('txBiasWarnLow', TType.DOUBLE, 20)
      oprot.writeDouble(self.txBiasWarnLow)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tempAlarmHigh)
    value = (value * 31) ^ hash(self.tempAlarmLow)
    value = (value * 31) ^ hash(self.tempWarnHigh)
    value = (value * 31) ^ hash(self.tempWarnLow)
    value = (value * 31) ^ hash(self.vccAlarmHigh)
    value = (value * 31) ^ hash(self.vccAlarmLow)
    value = (value * 31) ^ hash(self.vccWarnHigh)
    value = (value * 31) ^ hash(self.vccWarnLow)
    value = (value * 31) ^ hash(self.txPwrAlarmHigh)
    value = (value * 31) ^ hash(self.txPwrAlarmLow)
    value = (value * 31) ^ hash(self.txPwrWarnHigh)
    value = (value * 31) ^ hash(self.txPwrWarnLow)
    value = (value * 31) ^ hash(self.rxPwrAlarmHigh)
    value = (value * 31) ^ hash(self.rxPwrAlarmLow)
    value = (value * 31) ^ hash(self.rxPwrWarnHigh)
    value = (value * 31) ^ hash(self.rxPwrWarnLow)
    value = (value * 31) ^ hash(self.txBiasAlarmHigh)
    value = (value * 31) ^ hash(self.txBiasAlarmLow)
    value = (value * 31) ^ hash(self.txBiasWarnHigh)
    value = (value * 31) ^ hash(self.txBiasWarnLow)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SfpDomReadValue:
  """
  Attributes:
   - temp
   - vcc
   - txBias
   - txPwr
   - rxPwr
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'temp', None, None, ), # 1
    (2, TType.DOUBLE, 'vcc', None, None, ), # 2
    (3, TType.DOUBLE, 'txBias', None, None, ), # 3
    (4, TType.DOUBLE, 'txPwr', None, None, ), # 4
    (5, TType.DOUBLE, 'rxPwr', None, None, ), # 5
  )

  def __init__(self, temp=None, vcc=None, txBias=None, txPwr=None, rxPwr=None,):
    self.temp = temp
    self.vcc = vcc
    self.txBias = txBias
    self.txPwr = txPwr
    self.rxPwr = rxPwr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.temp = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.vcc = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.txBias = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.txPwr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.rxPwr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SfpDomReadValue')
    if self.temp is not None:
      oprot.writeFieldBegin('temp', TType.DOUBLE, 1)
      oprot.writeDouble(self.temp)
      oprot.writeFieldEnd()
    if self.vcc is not None:
      oprot.writeFieldBegin('vcc', TType.DOUBLE, 2)
      oprot.writeDouble(self.vcc)
      oprot.writeFieldEnd()
    if self.txBias is not None:
      oprot.writeFieldBegin('txBias', TType.DOUBLE, 3)
      oprot.writeDouble(self.txBias)
      oprot.writeFieldEnd()
    if self.txPwr is not None:
      oprot.writeFieldBegin('txPwr', TType.DOUBLE, 4)
      oprot.writeDouble(self.txPwr)
      oprot.writeFieldEnd()
    if self.rxPwr is not None:
      oprot.writeFieldBegin('rxPwr', TType.DOUBLE, 5)
      oprot.writeDouble(self.rxPwr)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.temp)
    value = (value * 31) ^ hash(self.vcc)
    value = (value * 31) ^ hash(self.txBias)
    value = (value * 31) ^ hash(self.txPwr)
    value = (value * 31) ^ hash(self.rxPwr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Vendor:
  """
  Attributes:
   - name
   - oui
   - partNumber
   - rev
   - serialNumber
   - dateCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'oui', None, None, ), # 2
    (3, TType.STRING, 'partNumber', None, None, ), # 3
    (4, TType.STRING, 'rev', None, None, ), # 4
    (5, TType.STRING, 'serialNumber', None, None, ), # 5
    (6, TType.STRING, 'dateCode', None, None, ), # 6
  )

  def __init__(self, name=None, oui=None, partNumber=None, rev=None, serialNumber=None, dateCode=None,):
    self.name = name
    self.oui = oui
    self.partNumber = partNumber
    self.rev = rev
    self.serialNumber = serialNumber
    self.dateCode = dateCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oui = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.partNumber = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.rev = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.serialNumber = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.dateCode = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Vendor')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.oui is not None:
      oprot.writeFieldBegin('oui', TType.STRING, 2)
      oprot.writeString(self.oui)
      oprot.writeFieldEnd()
    if self.partNumber is not None:
      oprot.writeFieldBegin('partNumber', TType.STRING, 3)
      oprot.writeString(self.partNumber)
      oprot.writeFieldEnd()
    if self.rev is not None:
      oprot.writeFieldBegin('rev', TType.STRING, 4)
      oprot.writeString(self.rev)
      oprot.writeFieldEnd()
    if self.serialNumber is not None:
      oprot.writeFieldBegin('serialNumber', TType.STRING, 5)
      oprot.writeString(self.serialNumber)
      oprot.writeFieldEnd()
    if self.dateCode is not None:
      oprot.writeFieldBegin('dateCode', TType.STRING, 6)
      oprot.writeString(self.dateCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.oui)
    value = (value * 31) ^ hash(self.partNumber)
    value = (value * 31) ^ hash(self.rev)
    value = (value * 31) ^ hash(self.serialNumber)
    value = (value * 31) ^ hash(self.dateCode)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SfpDom:
  """
  Attributes:
   - name
   - sfpPresent
   - domSupported
   - flags
   - threshValue
   - value
   - vendor
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.BOOL, 'sfpPresent', None, None, ), # 2
    (3, TType.BOOL, 'domSupported', None, None, ), # 3
    None, # 4
    None, # 5
    (6, TType.STRUCT, 'flags', (SfpDomThreshFlags, SfpDomThreshFlags.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'threshValue', (SfpDomThreshValue, SfpDomThreshValue.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'value', (SfpDomReadValue, SfpDomReadValue.thrift_spec), None, ), # 8
    (9, TType.STRUCT, 'vendor', (Vendor, Vendor.thrift_spec), None, ), # 9
  )

  def __init__(self, name=None, sfpPresent=None, domSupported=None, flags=None, threshValue=None, value=None, vendor=None,):
    self.name = name
    self.sfpPresent = sfpPresent
    self.domSupported = domSupported
    self.flags = flags
    self.threshValue = threshValue
    self.value = value
    self.vendor = vendor

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.sfpPresent = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.domSupported = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.flags = SfpDomThreshFlags()
          self.flags.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.threshValue = SfpDomThreshValue()
          self.threshValue.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.value = SfpDomReadValue()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.vendor = Vendor()
          self.vendor.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SfpDom')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.sfpPresent is not None:
      oprot.writeFieldBegin('sfpPresent', TType.BOOL, 2)
      oprot.writeBool(self.sfpPresent)
      oprot.writeFieldEnd()
    if self.domSupported is not None:
      oprot.writeFieldBegin('domSupported', TType.BOOL, 3)
      oprot.writeBool(self.domSupported)
      oprot.writeFieldEnd()
    if self.flags is not None:
      oprot.writeFieldBegin('flags', TType.STRUCT, 6)
      self.flags.write(oprot)
      oprot.writeFieldEnd()
    if self.threshValue is not None:
      oprot.writeFieldBegin('threshValue', TType.STRUCT, 7)
      self.threshValue.write(oprot)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 8)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.vendor is not None:
      oprot.writeFieldBegin('vendor', TType.STRUCT, 9)
      self.vendor.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.sfpPresent)
    value = (value * 31) ^ hash(self.domSupported)
    value = (value * 31) ^ hash(self.flags)
    value = (value * 31) ^ hash(self.threshValue)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.vendor)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Thresholds:
  """
  Attributes:
   - low
   - high
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'low', None, None, ), # 1
    (2, TType.DOUBLE, 'high', None, None, ), # 2
  )

  def __init__(self, low=None, high=None,):
    self.low = low
    self.high = high

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.low = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.high = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Thresholds')
    if self.low is not None:
      oprot.writeFieldBegin('low', TType.DOUBLE, 1)
      oprot.writeDouble(self.low)
      oprot.writeFieldEnd()
    if self.high is not None:
      oprot.writeFieldBegin('high', TType.DOUBLE, 2)
      oprot.writeDouble(self.high)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.low)
    value = (value * 31) ^ hash(self.high)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThresholdLevels:
  """
  Attributes:
   - alarm
   - warn
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'alarm', (Thresholds, Thresholds.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'warn', (Thresholds, Thresholds.thrift_spec), None, ), # 2
  )

  def __init__(self, alarm=None, warn=None,):
    self.alarm = alarm
    self.warn = warn

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.alarm = Thresholds()
          self.alarm.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.warn = Thresholds()
          self.warn.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThresholdLevels')
    if self.alarm is not None:
      oprot.writeFieldBegin('alarm', TType.STRUCT, 1)
      self.alarm.write(oprot)
      oprot.writeFieldEnd()
    if self.warn is not None:
      oprot.writeFieldBegin('warn', TType.STRUCT, 2)
      self.warn.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.alarm)
    value = (value * 31) ^ hash(self.warn)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AlarmThreshold:
  """
  Attributes:
   - temp
   - vcc
   - rxPwr
   - txBias
   - txPwr
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'temp', (ThresholdLevels, ThresholdLevels.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'vcc', (ThresholdLevels, ThresholdLevels.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'rxPwr', (ThresholdLevels, ThresholdLevels.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'txBias', (ThresholdLevels, ThresholdLevels.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'txPwr', (ThresholdLevels, ThresholdLevels.thrift_spec), None, ), # 5
  )

  def __init__(self, temp=None, vcc=None, rxPwr=None, txBias=None, txPwr=None,):
    self.temp = temp
    self.vcc = vcc
    self.rxPwr = rxPwr
    self.txBias = txBias
    self.txPwr = txPwr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.temp = ThresholdLevels()
          self.temp.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.vcc = ThresholdLevels()
          self.vcc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.rxPwr = ThresholdLevels()
          self.rxPwr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.txBias = ThresholdLevels()
          self.txBias.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.txPwr = ThresholdLevels()
          self.txPwr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AlarmThreshold')
    if self.temp is not None:
      oprot.writeFieldBegin('temp', TType.STRUCT, 1)
      self.temp.write(oprot)
      oprot.writeFieldEnd()
    if self.vcc is not None:
      oprot.writeFieldBegin('vcc', TType.STRUCT, 2)
      self.vcc.write(oprot)
      oprot.writeFieldEnd()
    if self.rxPwr is not None:
      oprot.writeFieldBegin('rxPwr', TType.STRUCT, 3)
      self.rxPwr.write(oprot)
      oprot.writeFieldEnd()
    if self.txBias is not None:
      oprot.writeFieldBegin('txBias', TType.STRUCT, 4)
      self.txBias.write(oprot)
      oprot.writeFieldEnd()
    if self.txPwr is not None:
      oprot.writeFieldBegin('txPwr', TType.STRUCT, 5)
      self.txPwr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.temp)
    value = (value * 31) ^ hash(self.vcc)
    value = (value * 31) ^ hash(self.rxPwr)
    value = (value * 31) ^ hash(self.txBias)
    value = (value * 31) ^ hash(self.txPwr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Flags:
  """
  Attributes:
   - high
   - low
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'high', None, None, ), # 1
    (2, TType.BOOL, 'low', None, None, ), # 2
  )

  def __init__(self, high=None, low=None,):
    self.high = high
    self.low = low

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.high = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.low = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Flags')
    if self.high is not None:
      oprot.writeFieldBegin('high', TType.BOOL, 1)
      oprot.writeBool(self.high)
      oprot.writeFieldEnd()
    if self.low is not None:
      oprot.writeFieldBegin('low', TType.BOOL, 2)
      oprot.writeBool(self.low)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.high)
    value = (value * 31) ^ hash(self.low)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FlagLevels:
  """
  Attributes:
   - alarm
   - warn
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'alarm', (Flags, Flags.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'warn', (Flags, Flags.thrift_spec), None, ), # 2
  )

  def __init__(self, alarm=None, warn=None,):
    self.alarm = alarm
    self.warn = warn

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.alarm = Flags()
          self.alarm.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.warn = Flags()
          self.warn.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FlagLevels')
    if self.alarm is not None:
      oprot.writeFieldBegin('alarm', TType.STRUCT, 1)
      self.alarm.write(oprot)
      oprot.writeFieldEnd()
    if self.warn is not None:
      oprot.writeFieldBegin('warn', TType.STRUCT, 2)
      self.warn.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.alarm)
    value = (value * 31) ^ hash(self.warn)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Sensor:
  """
  Attributes:
   - value
   - flags
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'value', None, None, ), # 1
    (2, TType.STRUCT, 'flags', (FlagLevels, FlagLevels.thrift_spec), None, ), # 2
  )

  def __init__(self, value=None, flags=None,):
    self.value = value
    self.flags = flags

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.value = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.flags = FlagLevels()
          self.flags.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Sensor')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.DOUBLE, 1)
      oprot.writeDouble(self.value)
      oprot.writeFieldEnd()
    if self.flags is not None:
      oprot.writeFieldBegin('flags', TType.STRUCT, 2)
      self.flags.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.flags)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GlobalSensors:
  """
  Attributes:
   - temp
   - vcc
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'temp', (Sensor, Sensor.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'vcc', (Sensor, Sensor.thrift_spec), None, ), # 2
  )

  def __init__(self, temp=None, vcc=None,):
    self.temp = temp
    self.vcc = vcc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.temp = Sensor()
          self.temp.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.vcc = Sensor()
          self.vcc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GlobalSensors')
    if self.temp is not None:
      oprot.writeFieldBegin('temp', TType.STRUCT, 1)
      self.temp.write(oprot)
      oprot.writeFieldEnd()
    if self.vcc is not None:
      oprot.writeFieldBegin('vcc', TType.STRUCT, 2)
      self.vcc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.temp)
    value = (value * 31) ^ hash(self.vcc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChannelSensors:
  """
  Attributes:
   - rxPwr
   - txBias
   - txPwr
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'rxPwr', (Sensor, Sensor.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'txBias', (Sensor, Sensor.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'txPwr', (Sensor, Sensor.thrift_spec), None, ), # 3
  )

  def __init__(self, rxPwr=None, txBias=None, txPwr=None,):
    self.rxPwr = rxPwr
    self.txBias = txBias
    self.txPwr = txPwr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.rxPwr = Sensor()
          self.rxPwr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.txBias = Sensor()
          self.txBias.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.txPwr = Sensor()
          self.txPwr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChannelSensors')
    if self.rxPwr is not None:
      oprot.writeFieldBegin('rxPwr', TType.STRUCT, 1)
      self.rxPwr.write(oprot)
      oprot.writeFieldEnd()
    if self.txBias is not None:
      oprot.writeFieldBegin('txBias', TType.STRUCT, 2)
      self.txBias.write(oprot)
      oprot.writeFieldEnd()
    if self.txPwr is not None:
      oprot.writeFieldBegin('txPwr', TType.STRUCT, 3)
      self.txPwr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rxPwr)
    value = (value * 31) ^ hash(self.txBias)
    value = (value * 31) ^ hash(self.txPwr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Cable:
  """
  Attributes:
   - singleModeKm
   - singleMode
   - om3
   - om2
   - om1
   - copper
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'singleModeKm', None, None, ), # 1
    (2, TType.I32, 'singleMode', None, None, ), # 2
    (3, TType.I32, 'om3', None, None, ), # 3
    (4, TType.I32, 'om2', None, None, ), # 4
    (5, TType.I32, 'om1', None, None, ), # 5
    (6, TType.I32, 'copper', None, None, ), # 6
  )

  def __init__(self, singleModeKm=None, singleMode=None, om3=None, om2=None, om1=None, copper=None,):
    self.singleModeKm = singleModeKm
    self.singleMode = singleMode
    self.om3 = om3
    self.om2 = om2
    self.om1 = om1
    self.copper = copper

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.singleModeKm = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.singleMode = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.om3 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.om2 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.om1 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.copper = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Cable')
    if self.singleModeKm is not None:
      oprot.writeFieldBegin('singleModeKm', TType.I32, 1)
      oprot.writeI32(self.singleModeKm)
      oprot.writeFieldEnd()
    if self.singleMode is not None:
      oprot.writeFieldBegin('singleMode', TType.I32, 2)
      oprot.writeI32(self.singleMode)
      oprot.writeFieldEnd()
    if self.om3 is not None:
      oprot.writeFieldBegin('om3', TType.I32, 3)
      oprot.writeI32(self.om3)
      oprot.writeFieldEnd()
    if self.om2 is not None:
      oprot.writeFieldBegin('om2', TType.I32, 4)
      oprot.writeI32(self.om2)
      oprot.writeFieldEnd()
    if self.om1 is not None:
      oprot.writeFieldBegin('om1', TType.I32, 5)
      oprot.writeI32(self.om1)
      oprot.writeFieldEnd()
    if self.copper is not None:
      oprot.writeFieldBegin('copper', TType.I32, 6)
      oprot.writeI32(self.copper)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.singleModeKm)
    value = (value * 31) ^ hash(self.singleMode)
    value = (value * 31) ^ hash(self.om3)
    value = (value * 31) ^ hash(self.om2)
    value = (value * 31) ^ hash(self.om1)
    value = (value * 31) ^ hash(self.copper)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Channel:
  """
  Attributes:
   - channel
   - sensors
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'channel', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    (6, TType.STRUCT, 'sensors', (ChannelSensors, ChannelSensors.thrift_spec), None, ), # 6
  )

  def __init__(self, channel=None, sensors=None,):
    self.channel = channel
    self.sensors = sensors

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.channel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.sensors = ChannelSensors()
          self.sensors.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Channel')
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.I32, 1)
      oprot.writeI32(self.channel)
      oprot.writeFieldEnd()
    if self.sensors is not None:
      oprot.writeFieldBegin('sensors', TType.STRUCT, 6)
      self.sensors.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.channel)
    value = (value * 31) ^ hash(self.sensors)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TransceiverInfo:
  """
  Attributes:
   - present
   - transceiver
   - port
   - sensor
   - thresholds
   - vendor
   - cable
   - channels
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'present', None, None, ), # 1
    (2, TType.I32, 'transceiver', None, None, ), # 2
    (3, TType.I32, 'port', None, None, ), # 3
    (4, TType.STRUCT, 'sensor', (GlobalSensors, GlobalSensors.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'thresholds', (AlarmThreshold, AlarmThreshold.thrift_spec), None, ), # 5
    None, # 6
    None, # 7
    None, # 8
    (9, TType.STRUCT, 'vendor', (Vendor, Vendor.thrift_spec), None, ), # 9
    (10, TType.STRUCT, 'cable', (Cable, Cable.thrift_spec), None, ), # 10
    None, # 11
    (12, TType.LIST, 'channels', (TType.STRUCT,(Channel, Channel.thrift_spec)), None, ), # 12
  )

  def __init__(self, present=None, transceiver=None, port=None, sensor=None, thresholds=None, vendor=None, cable=None, channels=None,):
    self.present = present
    self.transceiver = transceiver
    self.port = port
    self.sensor = sensor
    self.thresholds = thresholds
    self.vendor = vendor
    self.cable = cable
    self.channels = channels

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.present = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.transceiver = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.port = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.sensor = GlobalSensors()
          self.sensor.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.thresholds = AlarmThreshold()
          self.thresholds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.vendor = Vendor()
          self.vendor.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.cable = Cable()
          self.cable.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.channels = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Channel()
            _elem5.read(iprot)
            self.channels.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TransceiverInfo')
    if self.present is not None:
      oprot.writeFieldBegin('present', TType.BOOL, 1)
      oprot.writeBool(self.present)
      oprot.writeFieldEnd()
    if self.transceiver is not None:
      oprot.writeFieldBegin('transceiver', TType.I32, 2)
      oprot.writeI32(self.transceiver)
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I32, 3)
      oprot.writeI32(self.port)
      oprot.writeFieldEnd()
    if self.sensor is not None:
      oprot.writeFieldBegin('sensor', TType.STRUCT, 4)
      self.sensor.write(oprot)
      oprot.writeFieldEnd()
    if self.thresholds is not None:
      oprot.writeFieldBegin('thresholds', TType.STRUCT, 5)
      self.thresholds.write(oprot)
      oprot.writeFieldEnd()
    if self.vendor is not None:
      oprot.writeFieldBegin('vendor', TType.STRUCT, 9)
      self.vendor.write(oprot)
      oprot.writeFieldEnd()
    if self.cable is not None:
      oprot.writeFieldBegin('cable', TType.STRUCT, 10)
      self.cable.write(oprot)
      oprot.writeFieldEnd()
    if self.channels is not None:
      oprot.writeFieldBegin('channels', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.channels))
      for iter6 in self.channels:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.present)
    value = (value * 31) ^ hash(self.transceiver)
    value = (value * 31) ^ hash(self.port)
    value = (value * 31) ^ hash(self.sensor)
    value = (value * 31) ^ hash(self.thresholds)
    value = (value * 31) ^ hash(self.vendor)
    value = (value * 31) ^ hash(self.cable)
    value = (value * 31) ^ hash(self.channels)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
